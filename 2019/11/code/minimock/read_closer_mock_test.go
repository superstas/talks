package code

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i io.ReadCloser -o ./read_closer_mock_test.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ReadCloserMock implements io.ReadCloser
type ReadCloserMock struct {
	t minimock.Tester

	funcClose          func() (err error)
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mReadCloserMockClose

	funcRead          func(p []byte) (n int, err error)
	inspectFuncRead   func(p []byte)
	afterReadCounter  uint64
	beforeReadCounter uint64
	ReadMock          mReadCloserMockRead
}

// NewReadCloserMock returns a mock for io.ReadCloser
func NewReadCloserMock(t minimock.Tester) *ReadCloserMock {
	m := &ReadCloserMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mReadCloserMockClose{mock: m}

	m.ReadMock = mReadCloserMockRead{mock: m}
	m.ReadMock.callArgs = []*ReadCloserMockReadParams{}

	return m
}

type mReadCloserMockClose struct {
	mock               *ReadCloserMock
	defaultExpectation *ReadCloserMockCloseExpectation
	expectations       []*ReadCloserMockCloseExpectation
}

// ReadCloserMockCloseExpectation specifies expectation struct of the ReadCloser.Close
type ReadCloserMockCloseExpectation struct {
	mock *ReadCloserMock

	results *ReadCloserMockCloseResults
	Counter uint64
}

// ReadCloserMockCloseResults contains results of the ReadCloser.Close
type ReadCloserMockCloseResults struct {
	err error
}

// Expect sets up expected params for ReadCloser.Close
func (mmClose *mReadCloserMockClose) Expect() *mReadCloserMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ReadCloserMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ReadCloserMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the ReadCloser.Close
func (mmClose *mReadCloserMockClose) Inspect(f func()) *mReadCloserMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for ReadCloserMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by ReadCloser.Close
func (mmClose *mReadCloserMockClose) Return(err error) *ReadCloserMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ReadCloserMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ReadCloserMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &ReadCloserMockCloseResults{err}
	return mmClose.mock
}

//Set uses given function f to mock the ReadCloser.Close method
func (mmClose *mReadCloserMockClose) Set(f func() (err error)) *ReadCloserMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the ReadCloser.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the ReadCloser.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Close implements io.ReadCloser
func (mmClose *ReadCloserMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the ReadCloserMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to ReadCloserMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished ReadCloserMock.Close invocations
func (mmClose *ReadCloserMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of ReadCloserMock.Close invocations
func (mmClose *ReadCloserMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *ReadCloserMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *ReadCloserMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ReadCloserMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to ReadCloserMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to ReadCloserMock.Close")
	}
}

type mReadCloserMockRead struct {
	mock               *ReadCloserMock
	defaultExpectation *ReadCloserMockReadExpectation
	expectations       []*ReadCloserMockReadExpectation

	callArgs []*ReadCloserMockReadParams
	mutex    sync.RWMutex
}

// ReadCloserMockReadExpectation specifies expectation struct of the ReadCloser.Read
type ReadCloserMockReadExpectation struct {
	mock    *ReadCloserMock
	params  *ReadCloserMockReadParams
	results *ReadCloserMockReadResults
	Counter uint64
}

// ReadCloserMockReadParams contains parameters of the ReadCloser.Read
type ReadCloserMockReadParams struct {
	p []byte
}

// ReadCloserMockReadResults contains results of the ReadCloser.Read
type ReadCloserMockReadResults struct {
	n   int
	err error
}

// Expect sets up expected params for ReadCloser.Read
func (mmRead *mReadCloserMockRead) Expect(p []byte) *mReadCloserMockRead {
	if mmRead.mock.funcRead != nil {
		mmRead.mock.t.Fatalf("ReadCloserMock.Read mock is already set by Set")
	}

	if mmRead.defaultExpectation == nil {
		mmRead.defaultExpectation = &ReadCloserMockReadExpectation{}
	}

	mmRead.defaultExpectation.params = &ReadCloserMockReadParams{p}
	for _, e := range mmRead.expectations {
		if minimock.Equal(e.params, mmRead.defaultExpectation.params) {
			mmRead.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRead.defaultExpectation.params)
		}
	}

	return mmRead
}

// Inspect accepts an inspector function that has same arguments as the ReadCloser.Read
func (mmRead *mReadCloserMockRead) Inspect(f func(p []byte)) *mReadCloserMockRead {
	if mmRead.mock.inspectFuncRead != nil {
		mmRead.mock.t.Fatalf("Inspect function is already set for ReadCloserMock.Read")
	}

	mmRead.mock.inspectFuncRead = f

	return mmRead
}

// Return sets up results that will be returned by ReadCloser.Read
func (mmRead *mReadCloserMockRead) Return(n int, err error) *ReadCloserMock {
	if mmRead.mock.funcRead != nil {
		mmRead.mock.t.Fatalf("ReadCloserMock.Read mock is already set by Set")
	}

	if mmRead.defaultExpectation == nil {
		mmRead.defaultExpectation = &ReadCloserMockReadExpectation{mock: mmRead.mock}
	}
	mmRead.defaultExpectation.results = &ReadCloserMockReadResults{n, err}
	return mmRead.mock
}

//Set uses given function f to mock the ReadCloser.Read method
func (mmRead *mReadCloserMockRead) Set(f func(p []byte) (n int, err error)) *ReadCloserMock {
	if mmRead.defaultExpectation != nil {
		mmRead.mock.t.Fatalf("Default expectation is already set for the ReadCloser.Read method")
	}

	if len(mmRead.expectations) > 0 {
		mmRead.mock.t.Fatalf("Some expectations are already set for the ReadCloser.Read method")
	}

	mmRead.mock.funcRead = f
	return mmRead.mock
}

// When sets expectation for the ReadCloser.Read which will trigger the result defined by the following
// Then helper
func (mmRead *mReadCloserMockRead) When(p []byte) *ReadCloserMockReadExpectation {
	if mmRead.mock.funcRead != nil {
		mmRead.mock.t.Fatalf("ReadCloserMock.Read mock is already set by Set")
	}

	expectation := &ReadCloserMockReadExpectation{
		mock:   mmRead.mock,
		params: &ReadCloserMockReadParams{p},
	}
	mmRead.expectations = append(mmRead.expectations, expectation)
	return expectation
}

// Then sets up ReadCloser.Read return parameters for the expectation previously defined by the When method
func (e *ReadCloserMockReadExpectation) Then(n int, err error) *ReadCloserMock {
	e.results = &ReadCloserMockReadResults{n, err}
	return e.mock
}

// Read implements io.ReadCloser
func (mmRead *ReadCloserMock) Read(p []byte) (n int, err error) {
	mm_atomic.AddUint64(&mmRead.beforeReadCounter, 1)
	defer mm_atomic.AddUint64(&mmRead.afterReadCounter, 1)

	if mmRead.inspectFuncRead != nil {
		mmRead.inspectFuncRead(p)
	}

	mm_params := &ReadCloserMockReadParams{p}

	// Record call args
	mmRead.ReadMock.mutex.Lock()
	mmRead.ReadMock.callArgs = append(mmRead.ReadMock.callArgs, mm_params)
	mmRead.ReadMock.mutex.Unlock()

	for _, e := range mmRead.ReadMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n, e.results.err
		}
	}

	if mmRead.ReadMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRead.ReadMock.defaultExpectation.Counter, 1)
		mm_want := mmRead.ReadMock.defaultExpectation.params
		mm_got := ReadCloserMockReadParams{p}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRead.t.Errorf("ReadCloserMock.Read got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRead.ReadMock.defaultExpectation.results
		if mm_results == nil {
			mmRead.t.Fatal("No results are set for the ReadCloserMock.Read")
		}
		return (*mm_results).n, (*mm_results).err
	}
	if mmRead.funcRead != nil {
		return mmRead.funcRead(p)
	}
	mmRead.t.Fatalf("Unexpected call to ReadCloserMock.Read. %v", p)
	return
}

// ReadAfterCounter returns a count of finished ReadCloserMock.Read invocations
func (mmRead *ReadCloserMock) ReadAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRead.afterReadCounter)
}

// ReadBeforeCounter returns a count of ReadCloserMock.Read invocations
func (mmRead *ReadCloserMock) ReadBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRead.beforeReadCounter)
}

// Calls returns a list of arguments used in each call to ReadCloserMock.Read.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRead *mReadCloserMockRead) Calls() []*ReadCloserMockReadParams {
	mmRead.mutex.RLock()

	argCopy := make([]*ReadCloserMockReadParams, len(mmRead.callArgs))
	copy(argCopy, mmRead.callArgs)

	mmRead.mutex.RUnlock()

	return argCopy
}

// MinimockReadDone returns true if the count of the Read invocations corresponds
// the number of defined expectations
func (m *ReadCloserMock) MinimockReadDone() bool {
	for _, e := range m.ReadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRead != nil && mm_atomic.LoadUint64(&m.afterReadCounter) < 1 {
		return false
	}
	return true
}

// MinimockReadInspect logs each unmet expectation
func (m *ReadCloserMock) MinimockReadInspect() {
	for _, e := range m.ReadMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReadCloserMock.Read with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReadMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReadCounter) < 1 {
		if m.ReadMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ReadCloserMock.Read")
		} else {
			m.t.Errorf("Expected call to ReadCloserMock.Read with params: %#v", *m.ReadMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRead != nil && mm_atomic.LoadUint64(&m.afterReadCounter) < 1 {
		m.t.Error("Expected call to ReadCloserMock.Read")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReadCloserMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCloseInspect()

		m.MinimockReadInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReadCloserMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReadCloserMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockReadDone()
}
