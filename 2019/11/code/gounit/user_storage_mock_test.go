package gounit

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i talk/code/gounit.UserStorage -o ./user_storage_mock_test.go

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UserStorageMock implements UserStorage
type UserStorageMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, user *User) (err error)
	inspectFuncCreate   func(ctx context.Context, user *User)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mUserStorageMockCreate

	funcDelete          func(ctx context.Context, ID int) (err error)
	inspectFuncDelete   func(ctx context.Context, ID int)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mUserStorageMockDelete

	funcUpdate          func(ctx context.Context, user *User) (err error)
	inspectFuncUpdate   func(ctx context.Context, user *User)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mUserStorageMockUpdate

	funcUserByEmail          func(ctx context.Context, email string) (up1 *User, err error)
	inspectFuncUserByEmail   func(ctx context.Context, email string)
	afterUserByEmailCounter  uint64
	beforeUserByEmailCounter uint64
	UserByEmailMock          mUserStorageMockUserByEmail
}

// NewUserStorageMock returns a mock for UserStorage
func NewUserStorageMock(t minimock.Tester) *UserStorageMock {
	m := &UserStorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mUserStorageMockCreate{mock: m}
	m.CreateMock.callArgs = []*UserStorageMockCreateParams{}

	m.DeleteMock = mUserStorageMockDelete{mock: m}
	m.DeleteMock.callArgs = []*UserStorageMockDeleteParams{}

	m.UpdateMock = mUserStorageMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*UserStorageMockUpdateParams{}

	m.UserByEmailMock = mUserStorageMockUserByEmail{mock: m}
	m.UserByEmailMock.callArgs = []*UserStorageMockUserByEmailParams{}

	return m
}

type mUserStorageMockCreate struct {
	mock               *UserStorageMock
	defaultExpectation *UserStorageMockCreateExpectation
	expectations       []*UserStorageMockCreateExpectation

	callArgs []*UserStorageMockCreateParams
	mutex    sync.RWMutex
}

// UserStorageMockCreateExpectation specifies expectation struct of the UserStorage.Create
type UserStorageMockCreateExpectation struct {
	mock    *UserStorageMock
	params  *UserStorageMockCreateParams
	results *UserStorageMockCreateResults
	Counter uint64
}

// UserStorageMockCreateParams contains parameters of the UserStorage.Create
type UserStorageMockCreateParams struct {
	ctx  context.Context
	user *User
}

// UserStorageMockCreateResults contains results of the UserStorage.Create
type UserStorageMockCreateResults struct {
	err error
}

// Expect sets up expected params for UserStorage.Create
func (mmCreate *mUserStorageMockCreate) Expect(ctx context.Context, user *User) *mUserStorageMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserStorageMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserStorageMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &UserStorageMockCreateParams{ctx, user}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the UserStorage.Create
func (mmCreate *mUserStorageMockCreate) Inspect(f func(ctx context.Context, user *User)) *mUserStorageMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for UserStorageMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by UserStorage.Create
func (mmCreate *mUserStorageMockCreate) Return(err error) *UserStorageMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserStorageMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &UserStorageMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &UserStorageMockCreateResults{err}
	return mmCreate.mock
}

//Set uses given function f to mock the UserStorage.Create method
func (mmCreate *mUserStorageMockCreate) Set(f func(ctx context.Context, user *User) (err error)) *UserStorageMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the UserStorage.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the UserStorage.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the UserStorage.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mUserStorageMockCreate) When(ctx context.Context, user *User) *UserStorageMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("UserStorageMock.Create mock is already set by Set")
	}

	expectation := &UserStorageMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &UserStorageMockCreateParams{ctx, user},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up UserStorage.Create return parameters for the expectation previously defined by the When method
func (e *UserStorageMockCreateExpectation) Then(err error) *UserStorageMock {
	e.results = &UserStorageMockCreateResults{err}
	return e.mock
}

// Create implements UserStorage
func (mmCreate *UserStorageMock) Create(ctx context.Context, user *User) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, user)
	}

	mm_params := &UserStorageMockCreateParams{ctx, user}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := UserStorageMockCreateParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("UserStorageMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the UserStorageMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, user)
	}
	mmCreate.t.Fatalf("Unexpected call to UserStorageMock.Create. %v %v", ctx, user)
	return
}

// CreateAfterCounter returns a count of finished UserStorageMock.Create invocations
func (mmCreate *UserStorageMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of UserStorageMock.Create invocations
func (mmCreate *UserStorageMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to UserStorageMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mUserStorageMockCreate) Calls() []*UserStorageMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*UserStorageMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *UserStorageMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *UserStorageMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserStorageMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserStorageMock.Create")
		} else {
			m.t.Errorf("Expected call to UserStorageMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to UserStorageMock.Create")
	}
}

type mUserStorageMockDelete struct {
	mock               *UserStorageMock
	defaultExpectation *UserStorageMockDeleteExpectation
	expectations       []*UserStorageMockDeleteExpectation

	callArgs []*UserStorageMockDeleteParams
	mutex    sync.RWMutex
}

// UserStorageMockDeleteExpectation specifies expectation struct of the UserStorage.Delete
type UserStorageMockDeleteExpectation struct {
	mock    *UserStorageMock
	params  *UserStorageMockDeleteParams
	results *UserStorageMockDeleteResults
	Counter uint64
}

// UserStorageMockDeleteParams contains parameters of the UserStorage.Delete
type UserStorageMockDeleteParams struct {
	ctx context.Context
	ID  int
}

// UserStorageMockDeleteResults contains results of the UserStorage.Delete
type UserStorageMockDeleteResults struct {
	err error
}

// Expect sets up expected params for UserStorage.Delete
func (mmDelete *mUserStorageMockDelete) Expect(ctx context.Context, ID int) *mUserStorageMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserStorageMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserStorageMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &UserStorageMockDeleteParams{ctx, ID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the UserStorage.Delete
func (mmDelete *mUserStorageMockDelete) Inspect(f func(ctx context.Context, ID int)) *mUserStorageMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for UserStorageMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by UserStorage.Delete
func (mmDelete *mUserStorageMockDelete) Return(err error) *UserStorageMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserStorageMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserStorageMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &UserStorageMockDeleteResults{err}
	return mmDelete.mock
}

//Set uses given function f to mock the UserStorage.Delete method
func (mmDelete *mUserStorageMockDelete) Set(f func(ctx context.Context, ID int) (err error)) *UserStorageMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the UserStorage.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the UserStorage.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the UserStorage.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mUserStorageMockDelete) When(ctx context.Context, ID int) *UserStorageMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserStorageMock.Delete mock is already set by Set")
	}

	expectation := &UserStorageMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &UserStorageMockDeleteParams{ctx, ID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up UserStorage.Delete return parameters for the expectation previously defined by the When method
func (e *UserStorageMockDeleteExpectation) Then(err error) *UserStorageMock {
	e.results = &UserStorageMockDeleteResults{err}
	return e.mock
}

// Delete implements UserStorage
func (mmDelete *UserStorageMock) Delete(ctx context.Context, ID int) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, ID)
	}

	mm_params := &UserStorageMockDeleteParams{ctx, ID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := UserStorageMockDeleteParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("UserStorageMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the UserStorageMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, ID)
	}
	mmDelete.t.Fatalf("Unexpected call to UserStorageMock.Delete. %v %v", ctx, ID)
	return
}

// DeleteAfterCounter returns a count of finished UserStorageMock.Delete invocations
func (mmDelete *UserStorageMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of UserStorageMock.Delete invocations
func (mmDelete *UserStorageMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to UserStorageMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mUserStorageMockDelete) Calls() []*UserStorageMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*UserStorageMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *UserStorageMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *UserStorageMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserStorageMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserStorageMock.Delete")
		} else {
			m.t.Errorf("Expected call to UserStorageMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to UserStorageMock.Delete")
	}
}

type mUserStorageMockUpdate struct {
	mock               *UserStorageMock
	defaultExpectation *UserStorageMockUpdateExpectation
	expectations       []*UserStorageMockUpdateExpectation

	callArgs []*UserStorageMockUpdateParams
	mutex    sync.RWMutex
}

// UserStorageMockUpdateExpectation specifies expectation struct of the UserStorage.Update
type UserStorageMockUpdateExpectation struct {
	mock    *UserStorageMock
	params  *UserStorageMockUpdateParams
	results *UserStorageMockUpdateResults
	Counter uint64
}

// UserStorageMockUpdateParams contains parameters of the UserStorage.Update
type UserStorageMockUpdateParams struct {
	ctx  context.Context
	user *User
}

// UserStorageMockUpdateResults contains results of the UserStorage.Update
type UserStorageMockUpdateResults struct {
	err error
}

// Expect sets up expected params for UserStorage.Update
func (mmUpdate *mUserStorageMockUpdate) Expect(ctx context.Context, user *User) *mUserStorageMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserStorageMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserStorageMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &UserStorageMockUpdateParams{ctx, user}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the UserStorage.Update
func (mmUpdate *mUserStorageMockUpdate) Inspect(f func(ctx context.Context, user *User)) *mUserStorageMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for UserStorageMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by UserStorage.Update
func (mmUpdate *mUserStorageMockUpdate) Return(err error) *UserStorageMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserStorageMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &UserStorageMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &UserStorageMockUpdateResults{err}
	return mmUpdate.mock
}

//Set uses given function f to mock the UserStorage.Update method
func (mmUpdate *mUserStorageMockUpdate) Set(f func(ctx context.Context, user *User) (err error)) *UserStorageMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the UserStorage.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the UserStorage.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the UserStorage.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mUserStorageMockUpdate) When(ctx context.Context, user *User) *UserStorageMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("UserStorageMock.Update mock is already set by Set")
	}

	expectation := &UserStorageMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &UserStorageMockUpdateParams{ctx, user},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up UserStorage.Update return parameters for the expectation previously defined by the When method
func (e *UserStorageMockUpdateExpectation) Then(err error) *UserStorageMock {
	e.results = &UserStorageMockUpdateResults{err}
	return e.mock
}

// Update implements UserStorage
func (mmUpdate *UserStorageMock) Update(ctx context.Context, user *User) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, user)
	}

	mm_params := &UserStorageMockUpdateParams{ctx, user}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := UserStorageMockUpdateParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("UserStorageMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the UserStorageMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, user)
	}
	mmUpdate.t.Fatalf("Unexpected call to UserStorageMock.Update. %v %v", ctx, user)
	return
}

// UpdateAfterCounter returns a count of finished UserStorageMock.Update invocations
func (mmUpdate *UserStorageMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of UserStorageMock.Update invocations
func (mmUpdate *UserStorageMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to UserStorageMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mUserStorageMockUpdate) Calls() []*UserStorageMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*UserStorageMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *UserStorageMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *UserStorageMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserStorageMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserStorageMock.Update")
		} else {
			m.t.Errorf("Expected call to UserStorageMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to UserStorageMock.Update")
	}
}

type mUserStorageMockUserByEmail struct {
	mock               *UserStorageMock
	defaultExpectation *UserStorageMockUserByEmailExpectation
	expectations       []*UserStorageMockUserByEmailExpectation

	callArgs []*UserStorageMockUserByEmailParams
	mutex    sync.RWMutex
}

// UserStorageMockUserByEmailExpectation specifies expectation struct of the UserStorage.UserByEmail
type UserStorageMockUserByEmailExpectation struct {
	mock    *UserStorageMock
	params  *UserStorageMockUserByEmailParams
	results *UserStorageMockUserByEmailResults
	Counter uint64
}

// UserStorageMockUserByEmailParams contains parameters of the UserStorage.UserByEmail
type UserStorageMockUserByEmailParams struct {
	ctx   context.Context
	email string
}

// UserStorageMockUserByEmailResults contains results of the UserStorage.UserByEmail
type UserStorageMockUserByEmailResults struct {
	up1 *User
	err error
}

// Expect sets up expected params for UserStorage.UserByEmail
func (mmUserByEmail *mUserStorageMockUserByEmail) Expect(ctx context.Context, email string) *mUserStorageMockUserByEmail {
	if mmUserByEmail.mock.funcUserByEmail != nil {
		mmUserByEmail.mock.t.Fatalf("UserStorageMock.UserByEmail mock is already set by Set")
	}

	if mmUserByEmail.defaultExpectation == nil {
		mmUserByEmail.defaultExpectation = &UserStorageMockUserByEmailExpectation{}
	}

	mmUserByEmail.defaultExpectation.params = &UserStorageMockUserByEmailParams{ctx, email}
	for _, e := range mmUserByEmail.expectations {
		if minimock.Equal(e.params, mmUserByEmail.defaultExpectation.params) {
			mmUserByEmail.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUserByEmail.defaultExpectation.params)
		}
	}

	return mmUserByEmail
}

// Inspect accepts an inspector function that has same arguments as the UserStorage.UserByEmail
func (mmUserByEmail *mUserStorageMockUserByEmail) Inspect(f func(ctx context.Context, email string)) *mUserStorageMockUserByEmail {
	if mmUserByEmail.mock.inspectFuncUserByEmail != nil {
		mmUserByEmail.mock.t.Fatalf("Inspect function is already set for UserStorageMock.UserByEmail")
	}

	mmUserByEmail.mock.inspectFuncUserByEmail = f

	return mmUserByEmail
}

// Return sets up results that will be returned by UserStorage.UserByEmail
func (mmUserByEmail *mUserStorageMockUserByEmail) Return(up1 *User, err error) *UserStorageMock {
	if mmUserByEmail.mock.funcUserByEmail != nil {
		mmUserByEmail.mock.t.Fatalf("UserStorageMock.UserByEmail mock is already set by Set")
	}

	if mmUserByEmail.defaultExpectation == nil {
		mmUserByEmail.defaultExpectation = &UserStorageMockUserByEmailExpectation{mock: mmUserByEmail.mock}
	}
	mmUserByEmail.defaultExpectation.results = &UserStorageMockUserByEmailResults{up1, err}
	return mmUserByEmail.mock
}

//Set uses given function f to mock the UserStorage.UserByEmail method
func (mmUserByEmail *mUserStorageMockUserByEmail) Set(f func(ctx context.Context, email string) (up1 *User, err error)) *UserStorageMock {
	if mmUserByEmail.defaultExpectation != nil {
		mmUserByEmail.mock.t.Fatalf("Default expectation is already set for the UserStorage.UserByEmail method")
	}

	if len(mmUserByEmail.expectations) > 0 {
		mmUserByEmail.mock.t.Fatalf("Some expectations are already set for the UserStorage.UserByEmail method")
	}

	mmUserByEmail.mock.funcUserByEmail = f
	return mmUserByEmail.mock
}

// When sets expectation for the UserStorage.UserByEmail which will trigger the result defined by the following
// Then helper
func (mmUserByEmail *mUserStorageMockUserByEmail) When(ctx context.Context, email string) *UserStorageMockUserByEmailExpectation {
	if mmUserByEmail.mock.funcUserByEmail != nil {
		mmUserByEmail.mock.t.Fatalf("UserStorageMock.UserByEmail mock is already set by Set")
	}

	expectation := &UserStorageMockUserByEmailExpectation{
		mock:   mmUserByEmail.mock,
		params: &UserStorageMockUserByEmailParams{ctx, email},
	}
	mmUserByEmail.expectations = append(mmUserByEmail.expectations, expectation)
	return expectation
}

// Then sets up UserStorage.UserByEmail return parameters for the expectation previously defined by the When method
func (e *UserStorageMockUserByEmailExpectation) Then(up1 *User, err error) *UserStorageMock {
	e.results = &UserStorageMockUserByEmailResults{up1, err}
	return e.mock
}

// UserByEmail implements UserStorage
func (mmUserByEmail *UserStorageMock) UserByEmail(ctx context.Context, email string) (up1 *User, err error) {
	mm_atomic.AddUint64(&mmUserByEmail.beforeUserByEmailCounter, 1)
	defer mm_atomic.AddUint64(&mmUserByEmail.afterUserByEmailCounter, 1)

	if mmUserByEmail.inspectFuncUserByEmail != nil {
		mmUserByEmail.inspectFuncUserByEmail(ctx, email)
	}

	mm_params := &UserStorageMockUserByEmailParams{ctx, email}

	// Record call args
	mmUserByEmail.UserByEmailMock.mutex.Lock()
	mmUserByEmail.UserByEmailMock.callArgs = append(mmUserByEmail.UserByEmailMock.callArgs, mm_params)
	mmUserByEmail.UserByEmailMock.mutex.Unlock()

	for _, e := range mmUserByEmail.UserByEmailMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmUserByEmail.UserByEmailMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUserByEmail.UserByEmailMock.defaultExpectation.Counter, 1)
		mm_want := mmUserByEmail.UserByEmailMock.defaultExpectation.params
		mm_got := UserStorageMockUserByEmailParams{ctx, email}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUserByEmail.t.Errorf("UserStorageMock.UserByEmail got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUserByEmail.UserByEmailMock.defaultExpectation.results
		if mm_results == nil {
			mmUserByEmail.t.Fatal("No results are set for the UserStorageMock.UserByEmail")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmUserByEmail.funcUserByEmail != nil {
		return mmUserByEmail.funcUserByEmail(ctx, email)
	}
	mmUserByEmail.t.Fatalf("Unexpected call to UserStorageMock.UserByEmail. %v %v", ctx, email)
	return
}

// UserByEmailAfterCounter returns a count of finished UserStorageMock.UserByEmail invocations
func (mmUserByEmail *UserStorageMock) UserByEmailAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUserByEmail.afterUserByEmailCounter)
}

// UserByEmailBeforeCounter returns a count of UserStorageMock.UserByEmail invocations
func (mmUserByEmail *UserStorageMock) UserByEmailBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUserByEmail.beforeUserByEmailCounter)
}

// Calls returns a list of arguments used in each call to UserStorageMock.UserByEmail.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUserByEmail *mUserStorageMockUserByEmail) Calls() []*UserStorageMockUserByEmailParams {
	mmUserByEmail.mutex.RLock()

	argCopy := make([]*UserStorageMockUserByEmailParams, len(mmUserByEmail.callArgs))
	copy(argCopy, mmUserByEmail.callArgs)

	mmUserByEmail.mutex.RUnlock()

	return argCopy
}

// MinimockUserByEmailDone returns true if the count of the UserByEmail invocations corresponds
// the number of defined expectations
func (m *UserStorageMock) MinimockUserByEmailDone() bool {
	for _, e := range m.UserByEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UserByEmailMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUserByEmailCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUserByEmail != nil && mm_atomic.LoadUint64(&m.afterUserByEmailCounter) < 1 {
		return false
	}
	return true
}

// MinimockUserByEmailInspect logs each unmet expectation
func (m *UserStorageMock) MinimockUserByEmailInspect() {
	for _, e := range m.UserByEmailMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserStorageMock.UserByEmail with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UserByEmailMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUserByEmailCounter) < 1 {
		if m.UserByEmailMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserStorageMock.UserByEmail")
		} else {
			m.t.Errorf("Expected call to UserStorageMock.UserByEmail with params: %#v", *m.UserByEmailMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUserByEmail != nil && mm_atomic.LoadUint64(&m.afterUserByEmailCounter) < 1 {
		m.t.Error("Expected call to UserStorageMock.UserByEmail")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserStorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockDeleteInspect()

		m.MinimockUpdateInspect()

		m.MinimockUserByEmailInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockUserByEmailDone()
}
